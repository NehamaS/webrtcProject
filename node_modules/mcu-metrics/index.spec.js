"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const { Counter } = require('./index');
const util = require("util");
const sleep = util.promisify(setTimeout);
let counter;
beforeEach(async () => {
    counter = new Counter({
        name: 'metric_name',
        help: 'metric_help',
        labelNames: ['method', 'statusCode'],
    });
    await counter.set({ method: 'GET', statusCode: '200' }, 10);
    await sleep(100);
});
afterEach(async () => {
    await counter.set({ method: 'GET', statusCode: '200' }, 10);
    await sleep(100);
});
describe('mcu metrics counter', () => {
    test('create counter', async () => {
        expect(counter).toBeInstanceOf(Counter);
    });
    test('set default labels', async () => {
        const defaultLabels = { serviceName: 'api-v1' };
        counter.setDefaultLabels(defaultLabels);
        const output = await counter.metrics();
        expect(output.replace(/(\r\n|\n|\r)/gm, '')).toEqual(`# HELP metric_name metric_help# TYPE metric_name gaugemetric_name{method="GET",statusCode="200",serviceName="api-v1"} 10`);
    });
    test('set counter', async (done) => {
        counter.setDefaultLabels({});
        setTimeout(async () => {
            const output = await counter.metrics();
            expect(output.replace(/(\r\n|\n|\r)/gm, '')).toEqual(`# HELP metric_name metric_help# TYPE metric_name gaugemetric_name{method="GET",statusCode="200"} 10`);
            done();
        }, 600);
    });
    test('increment counter once', async (done) => {
        await counter.inc({ method: 'GET', statusCode: '200' });
        const output = await counter.metrics();
        expect(output.replace(/(\r\n|\n|\r)/gm, '')).toEqual(`# HELP metric_name metric_help# TYPE metric_name gaugemetric_name{method="GET",statusCode="200"} 11`);
        done();
    });
    test('decrement counter', async (done) => {
        await counter.dec({ method: 'GET', statusCode: '200' });
        const output = await counter.metrics();
        expect(output.replace(/(\r\n|\n|\r)/gm, '')).toEqual(`# HELP metric_name metric_help# TYPE metric_name gaugemetric_name{method="GET",statusCode="200"} 9`);
        done();
    });
    test('increment counter multiple', async (done) => {
        await counter.inc({ method: 'GET', statusCode: '200' }, 5);
        counter.inc({ method: 'GET', statusCode: '200' }, 5);
        const output = await counter.metrics();
        expect(output.replace(/(\r\n|\n|\r)/gm, '')).toEqual(`# HELP metric_name metric_help# TYPE metric_name gaugemetric_name{method="GET",statusCode="200"} 15`);
        done();
    });
    test('decrement counter multiple', async (done) => {
        await counter.dec({ method: 'GET', statusCode: '200' }, 5);
        setTimeout(async () => {
            const output = await counter.metrics();
            expect(output.replace(/(\r\n|\n|\r)/gm, '')).toEqual(`# HELP metric_name metric_help# TYPE metric_name gaugemetric_name{method="GET",statusCode="200"} 5`);
            done();
        }, 100);
    });
    test('output metrics', async (done) => {
        setTimeout(async () => {
            const output = await counter.metrics();
            expect(output.replace(/(\r\n|\n|\r)/gm, '')).toEqual(`# HELP metric_name metric_help# TYPE metric_name gaugemetric_name{method="GET",statusCode="200"} 10`);
            done();
        }, 40);
    });
});
//# sourceMappingURL=index.spec.js.map