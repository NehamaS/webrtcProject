"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Counter = void 0;
const util = require("util");
const registry_1 = require("./registry");
const util_1 = require("./util");
class Counter {
    constructor(options) {
        if (!(0, util_1.isObject)(options)) {
            throw new TypeError('constructor expected a config object');
        }
        if (!options.help) {
            throw new Error('Missing mandatory help parameter');
        }
        if (!options.name) {
            throw new Error('Missing mandatory name parameter');
        }
        if (!(0, util_1.validateMetricName)(options.name)) {
            throw new Error('Invalid metric name');
        }
        this.name = options.name;
        this.labelNames = options.labelNames || [];
        this.reset();
        this.help = options.help;
        this.aggregator = options.aggregator || 'sum';
        this.aregister = registry_1.Registry;
        options.registers = [this.aregister];
    }
    async set(labels, value) {
        if (typeof value !== 'number') {
            throw new TypeError(`Value is not a valid number: ${util.format(value)}`);
        }
        labels = labels || {};
        (0, util_1.validateLabel)(this.labelNames, labels);
        const options = {
            name: this.name,
            help: this.help,
            values: '',
            type: 'gauge',
            labelNames: this.labelNames,
            labels,
            value,
        };
        await this.aregister.update(this.name, options);
    }
    reset() {
    }
    async inc(labels, value) {
        const getValue = await this.getValue(this.name);
        await this.set(labels, getValue + (value || 1));
    }
    async dec(labels, value) {
        const getValue = await this.getValue(this.name);
        await this.set(labels, getValue - (value || 1));
    }
    async remove() {
        await this.aregister.remove(this.name);
    }
    async getValue(name) {
        return await this.aregister.getValue(name);
    }
    setDefaultLabels(defaultLabels) {
        this.aregister.setDefaultLabels(defaultLabels);
    }
    metrics() {
        return this.aregister.metrics();
    }
    async getSingleMetric(name) {
        return this.aregister.getSingleMetric(name);
    }
}
exports.Counter = Counter;
//# sourceMappingURL=counter.js.map