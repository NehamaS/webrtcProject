"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.escapeLabelValue = exports.escapeString = exports.getLabels = exports.validateLabel = exports.validateLabelName = exports.validateMetricName = exports.isObject = exports.getValueAsString = void 0;
const util = require("util");
const getValueAsString = (value) => {
    if (Number.isNaN(value)) {
        return 'Nan';
    }
    else if (!Number.isFinite(value)) {
        if (value < 0) {
            return '-Inf';
        }
        else {
            return '+Inf';
        }
    }
    else {
        return `${value}`;
    }
};
exports.getValueAsString = getValueAsString;
const getLabels = function (labelNames, args) {
    if (labelNames.length !== args.length) {
        throw new Error('Invalid number of arguments');
    }
    const argsAsArray = Array.prototype.slice.call(args);
    return labelNames.reduce((acc, label, index) => {
        return acc;
    }, {});
};
exports.getLabels = getLabels;
const isObject = (obj) => {
    return obj === Object(obj);
};
exports.isObject = isObject;
const metricRegexp = /^[a-zA-Z_:][a-zA-Z0-9_:]*$/;
const labelRegexp = /^[a-zA-Z_][a-zA-Z0-9_]*$/;
const validateMetricName = function (name) {
    return metricRegexp.test(name);
};
exports.validateMetricName = validateMetricName;
const validateLabelName = function (names) {
    let valid = true;
    (names || []).forEach((name) => {
        if (!labelRegexp.test(name)) {
            valid = false;
        }
    });
    return valid;
};
exports.validateLabelName = validateLabelName;
const validateLabel = function (savedLabels, labels) {
    Object.keys(labels).forEach((label) => {
        if (savedLabels.indexOf(label) === -1) {
            throw new Error(`Added label "${label}" is not included in initial labelset: ${util.inspect(savedLabels)}`);
        }
    });
};
exports.validateLabel = validateLabel;
const escapeString = function (str) {
    return str.replace(/\n/g, '\\n').replace(/\\(?!n)/g, '\\\\');
};
exports.escapeString = escapeString;
const escapeLabelValue = function (str) {
    if (typeof str !== 'string') {
        return str;
    }
    return escapeString(str).replace(/"/g, '\\"');
};
exports.escapeLabelValue = escapeLabelValue;
//# sourceMappingURL=util.js.map