import { Registry } from './registry';
export interface CounterConfig extends ObjectConstructor {
    registers: any;
    labelNames: string[];
    name: string;
    help: string;
    aggregator: string;
}
export interface metric {
    name: string;
    help: string;
    value: number;
    values?: any;
    type?: string;
    labelNames?: unknown;
    labels?: unknown;
}
declare type LabelValues<T extends string> = Partial<Record<T, string | number>>;
declare class Counter {
    aregister: typeof Registry;
    labelNames: string[];
    name: string;
    help: string;
    aggregator: string;
    constructor(options: CounterConfig);
    set(labels: LabelValues<string>, value: number): Promise<void>;
    reset(): void;
    inc(labels: LabelValues<string>, value?: number): Promise<void>;
    dec(labels: LabelValues<string>, value?: number): Promise<void>;
    remove(): Promise<void>;
    getValue(name: string): Promise<number>;
    setDefaultLabels(defaultLabels: string[]): void;
    metrics(): Promise<string>;
    getSingleMetric(name: string): Promise<metric>;
}
export { Counter };
