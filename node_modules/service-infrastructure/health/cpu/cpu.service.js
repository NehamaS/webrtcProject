"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CpuService = void 0;
const common_1 = require("@nestjs/common");
const terminus_1 = require("@nestjs/terminus");
const configuration_service_1 = require("../../common/config/configuration.service");
const health_def_1 = require("../health.def");
const mculogger_service_1 = require("../../common/logs/mculogger.service");
let CpuService = class CpuService extends terminus_1.HealthIndicator {
    constructor(configService, logger) {
        super();
        this.configService = configService;
        this.logger = logger;
    }
    async check() {
        return await this.isHealthy('cpu');
    }
    setProbType(probType = health_def_1.ProbType.HEALTH) {
        this.probType = probType;
    }
    async isHealthy(key) {
        let cpuUsage = await this.getCpuUsage();
        let maxCpuUsage = (health_def_1.ProbType.READY === this.probType) ? (Number(this.configService.get('health.readyThreshold.cpuUsage', 1.0))) : (Number(this.configService.get('health.healthyThreshold.cpuUsage', 1.0)));
        const isHealthy = maxCpuUsage > cpuUsage;
        this.logger.debug({ max: maxCpuUsage, usage: cpuUsage });
        let result = this.getStatus(key, isHealthy);
        if (isHealthy) {
            return result;
        }
        result[key]["max"] = maxCpuUsage;
        result[key]["usage"] = cpuUsage;
        throw new terminus_1.HealthCheckError('CpuIndicator failed', result);
    }
    async getCpuUsage() {
        let startTime = process.hrtime();
        let startUsage = process.cpuUsage();
        await this.sleep(500);
        let elapTime = process.hrtime(startTime);
        let elapTimeMS = this.secNSec2ms(elapTime);
        let elapUsage = process.cpuUsage(startUsage);
        let elapUserMS = this.secNSec2ms(elapUsage.user);
        let elapSystMS = this.secNSec2ms(elapUsage.system);
        let cpu = (100 * (elapUserMS + elapSystMS) / elapTimeMS);
        let cpuPercent = Number(cpu.toFixed(4));
        return cpuPercent;
    }
    secNSec2ms(secNSec) {
        if (Array.isArray(secNSec)) {
            return secNSec[0] * 1000 + secNSec[1] / 1000000;
        }
        return secNSec / 1000;
    }
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
};
CpuService = __decorate([
    (0, common_1.Injectable)({ scope: common_1.Scope.TRANSIENT }),
    __metadata("design:paramtypes", [configuration_service_1.ConfigurationService,
        mculogger_service_1.MculoggerService])
], CpuService);
exports.CpuService = CpuService;
//# sourceMappingURL=cpu.service.js.map