"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThriftService = void 0;
const common_1 = require("@nestjs/common");
const terminus_1 = require("@nestjs/terminus");
const health_def_1 = require("../health.def");
const mculogger_service_1 = require("../../common/logs/mculogger.service");
const thrift_pool_service_1 = require("../../thrift/clientPool/thrift.pool.service");
let ThriftService = class ThriftService extends terminus_1.HealthIndicator {
    constructor(thriftPoolService, logger) {
        super();
        this.thriftPoolService = thriftPoolService;
        this.logger = logger;
        this.thriftConfs = new Array();
    }
    async check() {
        return await this.isHealthy('ThriftHealthIndicator');
    }
    setProbType(probType = health_def_1.ProbType.LVN) {
        this.probType = probType;
    }
    async isHealthy(key) {
        let isHealthy;
        let thriftClients = new Array();
        try {
            for (const thriftConf of this.thriftConfs) {
                try {
                    let thriftClient = await this.thriftPoolService.getConnection(thriftConf.serviceType, thriftConf.thriftServiceApi);
                    if (null !== thriftClient) {
                        thriftClients.push(thriftClient);
                    }
                }
                catch (e) {
                    this.logger.warn({
                        msg: `ThriftPoolService.getConnection failure`,
                        serviceType: thriftConf.serviceType
                    });
                }
            }
            this.logger.debug({
                thriftClientsLength: thriftClients.length,
                ThriftConfsLength: this.thriftConfs.length
            });
            isHealthy = (thriftClients.length === this.thriftConfs.length);
        }
        catch (e) {
            isHealthy = false;
        }
        const result = this.getStatus(key, isHealthy);
        if (isHealthy) {
            return result;
        }
        throw new terminus_1.HealthCheckError(key, result);
    }
    setThriftConf(thriftServiceApis) {
        let thriftConf;
        thriftServiceApis.forEach(thriftServiceApi => {
            thriftConf = {
                serviceType: thriftServiceApi.serviceType,
                thriftServiceApi: thriftServiceApi.thriftServiceApi
            };
            this.thriftConfs.push(thriftConf);
        });
    }
};
ThriftService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [thrift_pool_service_1.ThriftPoolService,
        mculogger_service_1.MculoggerService])
], ThriftService);
exports.ThriftService = ThriftService;
//# sourceMappingURL=thrift.service.js.map