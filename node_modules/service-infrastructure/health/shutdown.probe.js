"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShutdownProbe = void 0;
const ready_service_1 = require("./ready.service");
const common_1 = require("@nestjs/common");
const too_many_requests_exception_1 = require("../exceptions/too.many.requests.exception");
let ShutdownProbe = class ShutdownProbe {
    check() {
        let result = {
            status: 'ok',
            details: { 'Shutdown': { status: 'up' } }
        };
        if (process.env.READY && process.env.READY == ready_service_1.NOT_READY) {
            result = {
                status: 'shutting_down',
                details: { 'Shutdown': { status: 'down', 'message': `${process.env.SERVICE_NAME || "Service"} is terminating...` } }
            };
            throw new too_many_requests_exception_1.TooManyRequestsException("Shutdown", result);
        }
        return result;
    }
};
ShutdownProbe = __decorate([
    (0, common_1.Injectable)()
], ShutdownProbe);
exports.ShutdownProbe = ShutdownProbe;
//# sourceMappingURL=shutdown.probe.js.map