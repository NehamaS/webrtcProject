"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseHealthService = void 0;
const terminus_1 = require("@nestjs/terminus");
class BaseHealthService extends terminus_1.HealthIndicator {
    constructor(configService, logger, health) {
        super();
        this.configService = configService;
        this.logger = logger;
        this.health = health;
        this.probs = new Array();
        this.cache = {};
    }
    async healthCheck(readFromCache = true) {
        if (readFromCache && Object.keys(this.cache).length > 0) {
            return this.cache;
        }
        let HealthIndicatorFunctions = new Array();
        this.probs.forEach(prob => {
            HealthIndicatorFunctions.push(async () => await prob.check());
        });
        let result = await this.health.check(HealthIndicatorFunctions);
        return result;
    }
    setProbsList(healthProbs, probType, override = false) {
        if (override) {
            this.probs = new Array();
        }
        if (healthProbs && Array.isArray(healthProbs) && healthProbs.length > 0) {
            healthProbs.forEach(prob => {
                prob.setProbType(probType);
                this.probs.push(prob);
            });
        }
    }
    setApplicationName(name) {
        return this.applicationName = name;
    }
    getApplicationName() {
        return this.applicationName;
    }
    async onApplicationBootstrap() {
        let probe = this;
        const enableHealthCheck = this.configService.get('health.enable', true);
        if (enableHealthCheck) {
            this.timeout = setInterval(async () => {
                try {
                    probe.cache = await probe.healthCheck(false);
                }
                catch (e) {
                    probe.cache = e.response;
                }
            }, Number(this.configService.get("health.probeInterval", 10000)));
        }
    }
    onApplicationShutdown(signal) {
        if (this.timeout) {
            this.timeout.unref();
        }
    }
}
exports.BaseHealthService = BaseHealthService;
//# sourceMappingURL=base.health.service.js.map