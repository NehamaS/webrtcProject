"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiskService = void 0;
const common_1 = require("@nestjs/common");
const terminus_1 = require("@nestjs/terminus");
const configuration_service_1 = require("../../common/config/configuration.service");
const health_def_1 = require("../health.def");
let DiskService = class DiskService {
    constructor(disckSpaceProbe, configService) {
        this.disckSpaceProbe = disckSpaceProbe;
        this.configService = configService;
    }
    async check() {
        return await this.isHealthy('storage');
    }
    async isHealthy(key) {
        let maxCapacity = (health_def_1.ProbType.READY === this.probType) ? (Number(this.configService.get('health.readyThreshold.maxDiskCapacity', 0.99))) : (Number(this.configService.get('health.healthyThreshold.maxDiskCapacity', 0.99)));
        return await this.disckSpaceProbe.checkStorage('storage', {
            thresholdPercent: maxCapacity,
            path: `${process.cwd()}`
        });
    }
    setProbType(probType = health_def_1.ProbType.HEALTH) {
        this.probType = probType;
    }
};
DiskService = __decorate([
    (0, common_1.Injectable)({ scope: common_1.Scope.TRANSIENT }),
    __metadata("design:paramtypes", [terminus_1.DiskHealthIndicator,
        configuration_service_1.ConfigurationService])
], DiskService);
exports.DiskService = DiskService;
//# sourceMappingURL=disk.service.js.map