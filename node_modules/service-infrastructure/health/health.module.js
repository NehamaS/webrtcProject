"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HealthModule = exports.DEFAULT_EXIT_TIME = void 0;
const common_1 = require("@nestjs/common");
const terminus_1 = require("@nestjs/terminus");
const health_controller_1 = require("./health.controller");
const health_service_1 = require("./health.service");
const ready_service_1 = require("./ready.service");
const memory_rss_service_1 = require("./memory/memory.rss.service");
const disk_service_1 = require("./disk/disk.service");
const cpu_service_1 = require("./cpu/cpu.service");
const discovery_service_1 = require("./discovery/discovery.service");
const thrift_service_1 = require("./thrift/thrift.service");
const common_module_1 = require("../common/common.module");
const thrift_module_1 = require("../thrift/thrift.module");
const etcd_service_1 = require("./etcd/etcd.service");
const shutdown_probe_1 = require("./shutdown.probe");
const mculogger_service_1 = require("../common/logs/mculogger.service");
const configuration_service_1 = require("../common/config/configuration.service");
exports.DEFAULT_EXIT_TIME = 1;
let HealthModule = class HealthModule {
    constructor(logger, config) {
        this.logger = logger;
        this.config = config;
        this.logger.debug({ action: "starting..." });
    }
    beforeApplicationShutdown(signal) {
        if (Boolean(this.config.get("shutdown.enabled", false))) {
            this.logger.info({
                action: "Shutting down started ",
                signal: signal ? signal : 'N/A'
            });
            return new Promise((resolve, reject) => {
                switch (signal) {
                    case 'SIGINT':
                        process.env.READY = ready_service_1.NOT_READY;
                        break;
                    case 'SIGTERM':
                        process.env.READY = ready_service_1.NOT_READY;
                        break;
                    default:
                        break;
                }
                this.shutDownTimer = setTimeout(() => {
                    this.logger.warn({ action: "Shutting down!!" });
                    return resolve();
                }, Number(this.config.get("shutdown.timeout", exports.DEFAULT_EXIT_TIME)) * 1000);
            });
        }
    }
    terminate() {
        if (this.shutDownTimer.hasRef()) {
            clearTimeout(this.shutDownTimer);
        }
    }
};
HealthModule = __decorate([
    (0, common_1.Module)({
        imports: [terminus_1.TerminusModule, common_module_1.CommonModule, thrift_module_1.ThriftModule],
        providers: [ready_service_1.ReadyService, health_service_1.HealthService, memory_rss_service_1.MemoryRssService, disk_service_1.DiskService, discovery_service_1.DiscoveryService, cpu_service_1.CpuService, thrift_service_1.ThriftService, etcd_service_1.EtcdService, shutdown_probe_1.ShutdownProbe],
        controllers: [health_controller_1.HealthController],
        exports: [ready_service_1.ReadyService, health_service_1.HealthService, discovery_service_1.DiscoveryService, thrift_service_1.ThriftService, cpu_service_1.CpuService, etcd_service_1.EtcdService]
    }),
    __metadata("design:paramtypes", [mculogger_service_1.MculoggerService,
        configuration_service_1.ConfigurationService])
], HealthModule);
exports.HealthModule = HealthModule;
//# sourceMappingURL=health.module.js.map