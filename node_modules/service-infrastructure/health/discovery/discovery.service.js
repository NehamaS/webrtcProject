"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiscoveryService = void 0;
const common_1 = require("@nestjs/common");
const Discovery_1 = require("mcu-discovery/Discovery");
const mculogger_service_1 = require("../../common/logs/mculogger.service");
const configuration_service_1 = require("../../common/config/configuration.service");
const health_def_1 = require("../health.def");
const terminus_1 = require("@nestjs/terminus");
const _ = require("lodash");
let DiscoveryService = class DiscoveryService extends terminus_1.HealthIndicator {
    constructor(configurationService, logger) {
        super();
        this.configurationService = configurationService;
        this.logger = logger;
        this.ERROR = 'error';
        this.discoveryConfs = new Array();
        this.discovery = this.getDiscoveryObj();
    }
    async check() {
        return await this.isHealthy('discovery');
    }
    setProbType(probType = health_def_1.ProbType.HEALTH) {
        this.probType = probType;
    }
    async isHealthy(key) {
        let discoveryStatus = await this.buildHealthDiscoveryList(this.discoveryConfs);
        const errorMessages = discoveryStatus.filter(element => element === this.ERROR);
        const isHealthy = errorMessages.length === 0;
        const result = this.getStatus(key, isHealthy, { errorMessages: errorMessages.length });
        if (isHealthy) {
            return result;
        }
        throw new terminus_1.HealthCheckError('DiscoveryService failed', result);
    }
    async setDiscoveyConf(servicesName) {
        servicesName.forEach(service => {
            switch (service) {
                case Discovery_1.ServiceType.MEDIA_GATEWAY:
                    this.discoveryConfs.push(this.getServiceConf('discovery.services.mediaGw'));
                    break;
                case Discovery_1.ServiceType.MCU_MONITOR_SERVICE:
                    this.discoveryConfs.push(this.getServiceConf('discovery.services.monitor'));
                    break;
                case Discovery_1.ServiceType.MCU_RECORDER_CONTROLLER:
                    this.discoveryConfs.push(this.getServiceConf('discovery.services.recorder'));
                    break;
                case Discovery_1.ServiceType.SIP_GATEWAY:
                    this.discoveryConfs.push(this.getServiceConf('discovery.services.sipGw'));
                    break;
                case Discovery_1.ServiceType.SIP_GATEWAY_NOTIFY:
                    this.discoveryConfs.push(this.getServiceConf('discovery.services.sipGwNotify'));
                    break;
                case Discovery_1.ServiceType.MCU_STATS_SERVICE:
                    this.discoveryConfs.push(this.getServiceConf('discovery.services.stats'));
                    break;
                case Discovery_1.ServiceType.MEDIA_SERVER:
                    this.discoveryConfs.push(this.getServiceConf('discovery.services.mediaServer'));
                    break;
                default:
                    break;
            }
        });
    }
    async getServiceAddress(discoveryConf) {
        let self = this;
        return new Promise(function (resolve, reject) {
            const cb = (err, result) => {
                if (err) {
                    reject(err);
                }
                else {
                    if ("dns" === self.configurationService.get('discovery.type') && result) {
                        const serviceAddress = result;
                        const address = serviceAddress.address ? serviceAddress.address : "";
                        if (address !== "") {
                            if (!_.isNil(serviceAddress.thriftPort)) {
                                self.discovery.dnsResolve(address, serviceAddress.thriftPort, function (error, ip) {
                                    if (error) {
                                        self.logger.error({
                                            error: `getServiceAddress. Failed to resolve address`,
                                            address: address,
                                            port: serviceAddress.thriftPort
                                        });
                                        reject(error);
                                    }
                                    else {
                                        self.logger.info({
                                            msg: `getServiceAddress Resolve`,
                                            address: address,
                                            port: serviceAddress.thriftPort,
                                            receivedIp: ip
                                        });
                                        resolve(serviceAddress);
                                    }
                                });
                            }
                            else {
                                reject(new Error("port does not exist in discovery response"));
                            }
                        }
                        else {
                            reject(new Error("address does not exist in discovery response"));
                        }
                    }
                    else {
                        resolve(result);
                    }
                }
            };
            self.discovery.getService(discoveryConf, "", cb);
        });
    }
    ;
    getServiceConf(serviceConfigurationPath) {
        let discoveryConf = {
            name: this.configurationService.get(`${serviceConfigurationPath}.name`),
            domainSuffix: this.configurationService.get(`${serviceConfigurationPath}.domainSuffix`),
            ttl: this.configurationService.get(`${serviceConfigurationPath}.ttl`)
        };
        return discoveryConf;
    }
    async buildHealthDiscoveryList(servicesToDiscover) {
        let discoveryStatus = new Array();
        servicesToDiscover.forEach(async (discConf) => {
            try {
                let ipAddress = await this.getServiceAddress(discConf);
                discoveryStatus.push(ipAddress);
            }
            catch (e) {
                discoveryStatus.push(this.ERROR);
            }
        });
        return discoveryStatus;
    }
    getDiscoveryObj() {
        let discoveryType = this.configurationService.get("discovery.type", 'dns');
        return new Discovery_1.Discovery(discoveryType, this.logger);
    }
};
DiscoveryService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [configuration_service_1.ConfigurationService,
        mculogger_service_1.MculoggerService])
], DiscoveryService);
exports.DiscoveryService = DiscoveryService;
//# sourceMappingURL=discovery.service.js.map