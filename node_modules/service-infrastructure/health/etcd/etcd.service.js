"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EtcdService = void 0;
const common_1 = require("@nestjs/common");
const terminus_1 = require("@nestjs/terminus");
const mculogger_service_1 = require("../../common/logs/mculogger.service");
const configuration_service_1 = require("../../common/config/configuration.service");
const health_def_1 = require("../health.def");
const persist_1 = require("mcu-persitence-service/persistance/persist");
const uuid_1 = require("uuid");
let EtcdService = class EtcdService extends terminus_1.HealthIndicator {
    constructor(logger, configurationService) {
        super();
        this.logger = logger;
        this.configurationService = configurationService;
    }
    async check() {
        return await this.isHealthy('EtcdHealthIndicator');
    }
    setProbType(probType = health_def_1.ProbType.LVN) {
        this.probType = probType;
    }
    async isHealthy(key) {
        const db = await this.getDbInstance();
        let uuid = (0, uuid_1.v4)();
        let isPut = await db.put(uuid, 'test', 60);
        const isHealthy = isPut;
        const result = this.getStatus(key, isHealthy);
        if (isHealthy) {
            return result;
        }
        throw new terminus_1.HealthCheckError('EtcdService failed', result);
    }
    async getDbInstance() {
        let options = {
            prefix: String(this.configurationService.get('db.prefix')),
            address: String(this.configurationService.get('db.etcd.host')),
            port: Number(this.configurationService.get('db.etcd.port')),
            type: this.configurationService.get('db.dbType')
        };
        return await new persist_1.Persist(this.logger, options, undefined);
    }
};
EtcdService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [mculogger_service_1.MculoggerService,
        configuration_service_1.ConfigurationService])
], EtcdService);
exports.EtcdService = EtcdService;
//# sourceMappingURL=etcd.service.js.map