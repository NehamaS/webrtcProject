"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var HealthService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HealthService = void 0;
const common_1 = require("@nestjs/common");
const terminus_1 = require("@nestjs/terminus");
const configuration_service_1 = require("../common/config/configuration.service");
const mculogger_service_1 = require("../common/logs/mculogger.service");
const memory_rss_service_1 = require("./memory/memory.rss.service");
const disk_service_1 = require("./disk/disk.service");
const base_health_service_1 = require("./base.health.service");
const health_def_1 = require("./health.def");
const discovery_service_1 = require("./discovery/discovery.service");
const cpu_service_1 = require("./cpu/cpu.service");
let HealthService = HealthService_1 = class HealthService extends base_health_service_1.BaseHealthService {
    constructor(memoryRssService, diskService, discoveryService, cpuService, configService, logger, health) {
        super(configService, logger, health);
        this.memoryRssService = memoryRssService;
        this.diskService = diskService;
        this.discoveryService = discoveryService;
        this.cpuService = cpuService;
        super.setApplicationName(HealthService_1.name);
        super.setProbsList([memoryRssService, diskService], health_def_1.ProbType.HEALTH);
    }
    setProbs(healthProbs, override = false) {
        super.setProbsList(healthProbs, health_def_1.ProbType.HEALTH, override);
    }
};
HealthService = HealthService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [memory_rss_service_1.MemoryRssService,
        disk_service_1.DiskService,
        discovery_service_1.DiscoveryService,
        cpu_service_1.CpuService,
        configuration_service_1.ConfigurationService,
        mculogger_service_1.MculoggerService,
        terminus_1.HealthCheckService])
], HealthService);
exports.HealthService = HealthService;
//# sourceMappingURL=health.service.js.map