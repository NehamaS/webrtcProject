"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HealthController = void 0;
const common_1 = require("@nestjs/common");
const terminus_1 = require("@nestjs/terminus");
const validation_pipe_1 = require("../pipes/validation.pipe");
const http_exception_filter_1 = require("../filters/http-exception.filter");
const ready_service_1 = require("./ready.service");
const health_service_1 = require("./health.service");
const mculogger_service_1 = require("../common/logs/mculogger.service");
let HealthController = class HealthController {
    constructor(readyService, healthyService, logger) {
        this.readyService = readyService;
        this.healthyService = healthyService;
        this.logger = logger;
    }
    async check(isFromCache = "true") {
        let fromCache = isFromCache && isFromCache.toLowerCase() === "true";
        let result = await this.healthyService.healthCheck(fromCache);
        this.logger.debug({ result: result });
        return result;
    }
    async ready(isFromCache = "true") {
        let result = {};
        try {
            let fromCache = isFromCache && isFromCache.toLowerCase() === "true";
            result = await this.readyService.healthCheck(fromCache);
            this.logger.debug({ result: result });
            if ("ok" === result.status) {
                return result;
            }
            throw new common_1.ServiceUnavailableException(result);
        }
        catch (e) {
            this.logger.error({ result: result });
            throw new common_1.HttpException(e.response, common_1.HttpStatus.TOO_MANY_REQUESTS);
        }
    }
};
__decorate([
    (0, common_1.Get)('healthcheck'),
    (0, terminus_1.HealthCheck)(),
    __param(0, (0, common_1.Query)("cache")),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], HealthController.prototype, "check", null);
__decorate([
    (0, common_1.Get)('isready'),
    (0, terminus_1.HealthCheck)(),
    __param(0, (0, common_1.Query)("cache")),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], HealthController.prototype, "ready", null);
HealthController = __decorate([
    (0, common_1.UsePipes)(validation_pipe_1.Validator),
    (0, common_1.UseFilters)(http_exception_filter_1.HttpExceptionFilter),
    (0, common_1.Controller)(),
    __metadata("design:paramtypes", [ready_service_1.ReadyService,
        health_service_1.HealthService,
        mculogger_service_1.MculoggerService])
], HealthController);
exports.HealthController = HealthController;
//# sourceMappingURL=health.controller.js.map