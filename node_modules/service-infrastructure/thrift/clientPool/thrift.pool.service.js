"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThriftPoolService = void 0;
const mculogger_service_1 = require("../../common/logs/mculogger.service");
const ClientDiscovery_1 = require("mcu-discovery/ClientDiscovery");
const common_1 = require("@nestjs/common");
const ThriftClientsPool_1 = require("mcu-discovery/ThriftClientsPool");
const configuration_service_1 = require("../../common/config/configuration.service");
let ThriftPoolService = class ThriftPoolService {
    constructor(logger, configurationService) {
        this.logger = logger;
        this.configurationService = configurationService;
        this.pool = new Map();
    }
    async getFixAddrConnection(ip, port, serverApi) {
        if (this.fix_addr_pool == undefined) {
            this.fix_addr_pool = new ThriftClientsPool_1.ThriftClientsPool(serverApi, this.getThriftConnectionObject(), this.logger);
        }
        return await this.fix_addr_pool.getClient({ address: ip, thriftPort: port });
    }
    async getConnection(serviceType, thriftServiceApi) {
        try {
            let discoveryConf = this.buildServiceConf(serviceType);
            let clientDiscoveryPool = await this.getConnectionPool(serviceType, thriftServiceApi, discoveryConf);
            let thriftClient = await clientDiscoveryPool.getClient(undefined);
            this.logger.debug({
                action: "getConnection",
                thriftClient: thriftClient
            });
            return thriftClient;
        }
        catch (e) {
            this.logger.error({
                msg: `Failed to get thriftClient`,
                serviceType: serviceType
            });
            return null;
        }
    }
    buildServiceConf(serviceType) {
        let discoveryConf = {
            type: serviceType,
            name: this.configurationService.get(`discovery.services.${serviceType}.name`),
            domainSuffix: this.configurationService.get(`discovery.services.${serviceType}.domainSuffix`),
            ttl: this.configurationService.get(`discovery.services.${serviceType}.ttl`)
        };
        return discoveryConf;
    }
    async getConnectionPool(serviceType, thriftServiceApi, discoveryConf) {
        if (this.pool.has(serviceType)) {
            return this.pool.get(serviceType);
        }
        this.logger.info({
            action: `build thrift connection pool`,
            serviceType: serviceType
        });
        let clientDiscovery = await this.buildConnectionPool(serviceType, thriftServiceApi, discoveryConf);
        this.pool.set(serviceType, clientDiscovery);
        return clientDiscovery;
    }
    async buildConnectionPool(serviceType, thriftServiceApi, discoveryConf) {
        try {
            let discoveryEnable = Boolean(this.configurationService.get('discovery.enable', true));
            let discoveryType = String(this.configurationService.get('discovery.type', 'dns'));
            let connConfig = this.getThriftConnectionObject();
            let config = {
                discoveryEnable: discoveryEnable,
                discoveryType: discoveryType,
                discoveryConfig: discoveryConf,
                serviceType: serviceType,
                connConfig: connConfig
            };
            let clientDiscovery = new ClientDiscovery_1.ClientDiscovery(thriftServiceApi, config, this.logger);
            return clientDiscovery;
        }
        catch (e) {
            let message = `Thrift connection failed for service ${serviceType}`;
            this.logger.warn({
                warning: `Thrift connection failed`,
                serviceType: serviceType,
                error: e.message ? e.message : e
            });
            throw new Error(`${message}`);
        }
    }
    getThriftConnectionObject() {
        let connConfig = {
            maxAttempts: Number(this.configurationService.get(`thrift.connectionsPool.maxAttempts`)),
            retryMaxDelay: Number(this.configurationService.get(`thrift.connectionsPool.retryMaxDelay`)),
            connectTimeout: Number(this.configurationService.get(`thrift.connectionsPool.connectTimeout`)),
            debug: Boolean(this.configurationService.get(`thrift.connectionsPool.debug`))
        };
        return connConfig;
    }
};
ThriftPoolService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [mculogger_service_1.MculoggerService,
        configuration_service_1.ConfigurationService])
], ThriftPoolService);
exports.ThriftPoolService = ThriftPoolService;
;
//# sourceMappingURL=thrift.pool.service.js.map