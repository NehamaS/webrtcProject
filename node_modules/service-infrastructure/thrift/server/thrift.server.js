"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThriftServer = void 0;
const common_1 = require("@nestjs/common");
const thrift = require("thrift");
const ip = require("ip");
const mculogger_service_1 = require("../../common/logs/mculogger.service");
const configuration_service_1 = require("../../common/config/configuration.service");
const THRIFT_PORT = 7070;
let ThriftServer = class ThriftServer {
    constructor(logger, config) {
        this.logger = logger;
        this.config = config;
    }
    createThriftServer(thriftApi, handler) {
        if ((!thriftApi.hasOwnProperty("Client")) && (!thriftApi.hasOwnProperty("Client"))) {
            this.logger.error({ msg: "Thrift api is invalid, probably not autogenerated" });
            throw new Error("Thrift api is invalid");
        }
        try {
            if (thriftApi && handler) {
                let options = { transport: thrift.TFramedTransport, protocol: thrift.TBinaryProtocol };
                this.server = thrift.createServer(thriftApi, handler, options);
                return;
            }
            this.logger.warn({ msg: "Thrift server cannot be initialized!!!!  Did you forget?" });
        }
        catch (e) {
            this.logger.error({ error: "Thrift server cannot be initialized", msg: e.message });
        }
    }
    addErrorHandler() {
        this.server.addListener('error', function (err) {
            if (err) {
                this.logger.error({ error: 'Thrift ERROR', msg: err.message ? err.message : err });
                return;
            }
            this.logger.info({ msg: 'Thrift Server received error' });
        });
    }
    getPort() {
        let port = process.env.THRIFT_PORT ? parseInt(process.env.THRIFT_PORT) : parseInt(this.config.get('thrift.port', THRIFT_PORT));
        return port;
    }
    getAddress() {
        let address = process.env.THBIND ? process.env.THBIND : ip.address();
        return address;
    }
    start() {
        if (this.server) {
            this.logger.info({ msg: 'Starting thrift server', address: this.getAddress(), port: this.getPort() });
            try {
                this.server.listen(this.getPort(), this.getAddress());
            }
            catch (e) {
                this.logger.warn({ msg: "Thrift server already started" });
            }
            return;
        }
        this.logger.warn({ msg: "Thrift server cannot be started!!!!" });
    }
};
ThriftServer = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [mculogger_service_1.MculoggerService,
        configuration_service_1.ConfigurationService])
], ThriftServer);
exports.ThriftServer = ThriftServer;
//# sourceMappingURL=thrift.server.js.map