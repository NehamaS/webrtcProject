"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricsController = void 0;
const common_1 = require("@nestjs/common");
const validation_pipe_1 = require("../pipes/validation.pipe");
const http_exception_filter_1 = require("../filters/http-exception.filter");
const mculogger_service_1 = require("../common/logs/mculogger.service");
const metrics_service_1 = require("./metrics.service");
let MetricsController = class MetricsController {
    constructor(metricsService, logger) {
        this.metricsService = metricsService;
        this.logger = logger;
    }
    async metrics() {
        try {
            return this.metricsService.collect();
        }
        catch (e) {
            this.logger.error({ error: e.message ? e.message : e });
            throw new common_1.HttpException(`Internal server error`, common_1.HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
};
__decorate([
    (0, common_1.Get)(),
    (0, common_1.Header)('Content-Type', 'text/plain'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], MetricsController.prototype, "metrics", null);
MetricsController = __decorate([
    (0, common_1.UsePipes)(validation_pipe_1.Validator),
    (0, common_1.UseFilters)(http_exception_filter_1.HttpExceptionFilter),
    (0, common_1.Controller)('metrics'),
    __metadata("design:paramtypes", [metrics_service_1.MetricsService, mculogger_service_1.MculoggerService])
], MetricsController);
exports.MetricsController = MetricsController;
//# sourceMappingURL=metrics.controller.js.map