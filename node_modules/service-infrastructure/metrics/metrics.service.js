"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricsService = void 0;
const common_1 = require("@nestjs/common");
const mculogger_service_1 = require("../common/logs/mculogger.service");
const db_service_1 = require("../db/db.service");
const prom_client_1 = require("prom-client");
const etcd_service_1 = require("../health/etcd/etcd.service");
let { Registry } = require('mcu-metrics');
const GAUGE_NAME_ETCD_READWRITE = 'etcd_read_write';
let MetricsService = class MetricsService {
    constructor(logger, dbSrv, etcdService) {
        this.logger = logger;
        this.dbSrv = dbSrv;
        this.etcdService = etcdService;
        this.metricsRegistry = Registry;
        try {
            this.etcd_readwrite = new prom_client_1.Gauge({ name: GAUGE_NAME_ETCD_READWRITE, help: 'etcd has read write capability' });
        }
        catch (e) { }
    }
    onApplicationBootstrap() {
        this.metricsRegistry.setDB(this.dbSrv.getDB());
    }
    async etcdMetrics() {
        try {
            const resp = await this.etcdService.check();
            console.log(resp);
            this.etcd_readwrite.set(resp ? 1 : 0);
            return prom_client_1.register.metrics();
        }
        catch (e) {
            this.etcd_readwrite.set(0);
            return prom_client_1.register.metrics();
        }
    }
    async collect() {
        let result = "";
        try {
            result = await this.metricsRegistry.metrics();
            const etcdMetrics = await this.etcdMetrics();
            result = `${result}\n${etcdMetrics}`;
            this.logger.debug({ result: result });
        }
        catch (e) {
            this.logger.error({ error: e.message, result: result });
        }
        return result;
    }
};
MetricsService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [mculogger_service_1.MculoggerService,
        db_service_1.DbService, etcd_service_1.EtcdService])
], MetricsService);
exports.MetricsService = MetricsService;
//# sourceMappingURL=metrics.service.js.map