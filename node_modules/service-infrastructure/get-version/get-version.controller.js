"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var GetVersionController_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetVersionController = void 0;
const common_1 = require("@nestjs/common");
const mculogger_service_1 = require("../common/logs/mculogger.service");
let GetVersionController = GetVersionController_1 = class GetVersionController {
    constructor(logger) {
        this.logger = logger;
    }
    getAppVersion() {
        let version = process.env.SERVICE_VERSION || process.env.npm_package_version;
        this.logger.info({ 'version': version });
        return version;
    }
    getClassName() {
        return GetVersionController_1.name;
    }
};
__decorate([
    (0, common_1.Get)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object)
], GetVersionController.prototype, "getAppVersion", null);
GetVersionController = GetVersionController_1 = __decorate([
    (0, common_1.Controller)('get-version'),
    __metadata("design:paramtypes", [mculogger_service_1.MculoggerService])
], GetVersionController);
exports.GetVersionController = GetVersionController;
//# sourceMappingURL=get-version.controller.js.map