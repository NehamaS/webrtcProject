"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationService = void 0;
const common_1 = require("@nestjs/common");
const mculogger_service_1 = require("../common/logs/mculogger.service");
const configuration_service_1 = require("../common/config/configuration.service");
const check_disk_space_1 = require("check-disk-space");
const cpu_service_1 = require("../health/cpu/cpu.service");
const path = require("path");
let ApplicationService = class ApplicationService {
    constructor(logger, configurationService, cpuService) {
        this.logger = logger;
        this.configurationService = configurationService;
        this.cpuService = cpuService;
        this.initProcess();
    }
    monitorService() {
        let self = this;
        this.timeout = setInterval(async () => {
            if (Boolean(self.configurationService.get('monitorresources.enable', false))) {
                try {
                    let memoryUsage = await process.memoryUsage();
                    let cpuUsage = await process.cpuUsage();
                    let getCpuUsage = await this.cpuService.getCpuUsage();
                    self.logger.info({
                        action: 'process.memoryUsage()',
                        data: memoryUsage
                    });
                    self.logger.info({
                        action: 'process.cpuUsage()',
                        data: cpuUsage
                    });
                    self.logger.info({
                        action: 'this.cpuService.getCpuUsage()',
                        data: getCpuUsage
                    });
                    let separator = process.platform === 'win32' ? `C:${path.sep}` : `${path.sep}`;
                    let diskSpace = await (0, check_disk_space_1.default)(separator);
                    self.logger.info({
                        action: `checkDiskSpace('/')`,
                        data: diskSpace
                    });
                }
                catch (e) {
                    self.logger.error({ msg: e.message ? e.message : e });
                }
            }
        }, Number(self.configurationService.get('monitorresources.interval', 10000)));
    }
    initProcess() {
        let self = this;
        self.logger.info({
            action: `Start initProcess`,
            pid: process.pid
        });
        process.on('uncaughtException', (error) => {
            self.logger.error({ uncaughtException: error.stack });
        });
    }
    onApplicationBootstrap() {
        this.monitorService();
    }
    onApplicationShutdown(signal) {
        if (this.timeout) {
            this.timeout.unref();
        }
    }
};
ApplicationService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [mculogger_service_1.MculoggerService,
        configuration_service_1.ConfigurationService,
        cpu_service_1.CpuService])
], ApplicationService);
exports.ApplicationService = ApplicationService;
//# sourceMappingURL=application.service.js.map