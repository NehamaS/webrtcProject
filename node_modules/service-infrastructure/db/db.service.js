"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DbService = void 0;
const common_1 = require("@nestjs/common");
const persist_1 = require("mcu-persitence-service/persistance/persist");
const common_2 = require("mcu-persitence-service/common/common");
const configuration_service_1 = require("../common/config/configuration.service");
const mculogger_service_1 = require("../common/logs/mculogger.service");
const Discovery_1 = require("mcu-discovery/Discovery");
let DbService = class DbService {
    constructor(logger, configurationService) {
        this.logger = logger;
        this.configurationService = configurationService;
        this.setRecord = async (key, value, ttl = 0) => {
            return await this.db.put(key, value, ttl);
        };
        this.remove = async (key) => {
            return await this.db.remove(key);
        };
        this.get = async (key) => {
            let tmp = await this.db.get(key);
            return tmp;
        };
        this.getItemsByPrefix = async (key) => {
            let tmpList = await this.db.itemsByPrefix(key);
            return tmpList;
        };
        this.getNumOfRecords = async (key) => {
            let items = await this.db.itemsByPrefix(key);
            return items.length;
        };
        this.hasRecord = async (key) => {
            let item = await this.db.get(key);
            return ((item === undefined)) ? false : true;
        };
    }
    createConnection() {
        let dbTypeStr = (common_2.DBType[common_2.DBType[this.configurationService.get('db.dbType').toUpperCase()]]).toLowerCase();
        let settings = {
            configurationService: this.configurationService,
            get prefix() {
                return process.env.SERVICE_NAME || String(this.configurationService.get('db.prefix'));
            },
            get address() {
                return String(this.configurationService.get(`db.${dbTypeStr}.host`));
            },
            get port() {
                return Number(this.configurationService.get(`db.${dbTypeStr}.port`));
            },
            get type() {
                let dbTypeStr = String(this.configurationService.get('db.dbType'));
                let dbType = (common_2.DBType[dbTypeStr.toUpperCase()]);
                return dbType;
            },
            get dbConfig() {
                return {
                    configurationService: this.configurationService,
                    get host() {
                        return String(this.configurationService.get(`db.${dbTypeStr}.host`));
                    },
                    get port() {
                        return Number(this.configurationService.get(`db.${dbTypeStr}.port`));
                    },
                    get ttl() {
                        return String(this.configurationService.get(`db.${dbTypeStr}.ttl`));
                    },
                    get lockTtl() {
                        return Number(this.configurationService.get(`db.${dbTypeStr}.lockTtl`));
                    }
                };
            },
            get refreshInterval() {
                return Number(this.configurationService.get(`db.${dbTypeStr}.refreshInterval`));
            },
            get discoveryConfig() {
                if (this.configurationService.get(`discovery.services.${dbTypeStr}`)) {
                    let discovery = {
                        configurationService: this.configurationService,
                        get type() {
                            return String(this.configurationService.get('discovery.type'));
                        },
                        get config() {
                            return {
                                name: dbTypeStr,
                                domainSuffix: this.configurationService.get(`discovery.services.${dbTypeStr}.domainSuffix`),
                                type: Discovery_1.ServiceType.ETCD
                            };
                        }
                    };
                    return discovery;
                }
                return undefined;
            }
        };
        this.db = new persist_1.Persist(this.logger, settings, undefined);
    }
    onApplicationBootstrap() {
    }
    async onModuleInit() {
        await this.configurationService["updateConfiguration"]();
        this.createConnection();
    }
    getDB() {
        return this.db;
    }
};
DbService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [mculogger_service_1.MculoggerService,
        configuration_service_1.ConfigurationService])
], DbService);
exports.DbService = DbService;
//# sourceMappingURL=db.service.js.map