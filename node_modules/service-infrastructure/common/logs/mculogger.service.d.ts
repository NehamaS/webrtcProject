import { ConsoleLogger, OnApplicationBootstrap } from '@nestjs/common';
import { ConfigService } from "@nestjs/config";
interface Stack {
    file: string;
    methodName: string;
    arguments: any[];
    lineNumber: number;
    column: number;
}
export declare class MculoggerService extends ConsoleLogger implements OnApplicationBootstrap {
    private readonly config;
    private formatter;
    private queue;
    private logLevel;
    private timingStart;
    private useLegacy;
    private loggerMethod;
    private loggerDebug;
    private batchSize;
    private batchDelay;
    private batchDelayTimeout;
    constructor(config: ConfigService);
    onApplicationBootstrap(): void;
    onModuleInit(): Promise<void>;
    legacy(): any;
    elapsed_time(note: string): void;
    createQueue(): void;
    parseMsg(message: any, msg: any): any;
    parseNode(line: any): Stack;
    parse(stackString: string): false | {
        filename: any;
        line: any;
        method: any;
        column: any;
    };
    getStack(): string | false | {
        filename: any;
        line: any;
        method: any;
        column: any;
    };
    getCircularReplacer(): (key: any, value: any) => any;
    output(level: any, message: any): void;
    error(...args: any): void;
    info(...args: any): void;
    warn(...args: any): void;
    debug(...args: any): void;
    verbose(...args: any): void;
    update(config: any): void;
}
export {};
