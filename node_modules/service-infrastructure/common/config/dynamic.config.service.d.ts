import { OnApplicationShutdown } from "@nestjs/common";
import { MculoggerService } from "../logs/mculogger.service";
export declare type KeyValueStoreHandler = (error: Error | undefined, res: string | undefined, defaultHandler?: any) => void;
export declare type KeysStoreHandler = (error: Error | undefined, res: Object[] | undefined) => void;
export declare class DynamicConfig implements OnApplicationShutdown {
    private readonly logger;
    private consulObjet;
    private keyValueStore;
    private updateConfigPeriodic;
    private DEFAULT_UPDATE_CONF_INTERVAL;
    private PLATFORM_TYPE;
    private CONF_PATH;
    constructor(logger: MculoggerService);
    private startConsul;
    updateConfig(confKey: string, servConf: Object, automaticUpdateEnabled?: boolean): Promise<Object>;
    private getKey;
    private getK8sConf;
    private mergeConf;
    private performKVapi;
    private getKeys;
    private autoUpdateConfig;
    private updateConf;
    onApplicationShutdown(signal?: string): any;
}
