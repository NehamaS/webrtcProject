"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurationService = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const dynamic_config_service_1 = require("./dynamic.config.service");
const flatten = require("flat");
const mculogger_service_1 = require("../logs/mculogger.service");
const decorator_1 = require("mcu-discovery/lib/decorator");
const path = require("path");
const appConfiguration_1 = require("./configuration/appConfiguration");
const PRM_CONF_INTERVAL = 'updateConfigurationInterval';
let ConfigurationService = class ConfigurationService {
    constructor(configService, dynamicConfig, logger) {
        this.configService = configService;
        this.dynamicConfig = dynamicConfig;
        this.logger = logger;
        this.flattenConfig = new Object();
        this.PLATFORM_TYPE = (process.env.PLATFORM_TYPE) ? process.env.PLATFORM_TYPE : decorator_1.PLATFORM_TYPE_KUBERNETES;
        this.confPath = (process.env.SRV_CONF_PATH) ? (process.env.SRV_CONF_PATH) : `${process.cwd()}${path.sep}config${path.sep}config.json`;
        this.confKey = `${process.env.SERVICE_NAME}/config`;
        try {
            this.serviceConf = require(this.confPath);
        }
        catch (e) {
            let message = e.message ? e.message : e;
            this.logger.error({
                error: `Failed to read service config`,
                msg: message
            });
            this.serviceConf = {};
        }
    }
    async onModuleInit() {
        await this.updateConfiguration();
        this.logger.info({
            action: 'service configuration',
            data: {
                service: process.env.SERVICE_NAME,
                platform: this.PLATFORM_TYPE,
                configFile: this.confPath,
                CONF_PATH: process.env.PLATFORM_TYPE == decorator_1.PLATFORM_TYPE_KUBERNETES ? process.env.CONF_PATH : this.confKey
            }
        });
        if (!this.timeout) {
            this.timeout = setInterval(async () => {
                await this.updateConfiguration();
            }, (typeof (this.get(PRM_CONF_INTERVAL)) === 'number') ? Number(this.get(PRM_CONF_INTERVAL)) : 30000);
        }
    }
    onApplicationShutdown(signal) {
        if (this.timeout) {
            this.timeout.unref();
        }
    }
    get(propertyPath, defaultValue) {
        return this.flattenConfig.hasOwnProperty(propertyPath) ? this.flattenConfig[propertyPath] : this.configService.get(propertyPath, defaultValue);
    }
    async updateConfiguration() {
        try {
            if (process.env.PLATFORM_CONFIG !== appConfiguration_1.PLATFORM_NONE) {
                this.logger.debug({
                    msg: 'before',
                    defaultConfig: this.serviceConf
                });
                let updateConf = await this.dynamicConfig.updateConfig(this.confKey, this.serviceConf, false);
                if (this.serviceConf["logger"]) {
                    this.logger.update(this.serviceConf["logger"]);
                }
                this.logger.debug({
                    msg: 'after',
                    config: this.serviceConf
                });
            }
            this.flattenConfig = await flatten(this.serviceConf);
            this.logger.debug({ MergedConfiguration: flatten.unflatten(this.flattenConfig) });
        }
        catch (error) {
            this.logger.error({ msg: (error.message) ? error.message : error });
        }
    }
    getConfig() {
        return this.flattenConfig;
    }
};
ConfigurationService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [config_1.ConfigService,
        dynamic_config_service_1.DynamicConfig,
        mculogger_service_1.MculoggerService])
], ConfigurationService);
exports.ConfigurationService = ConfigurationService;
//# sourceMappingURL=configuration.service.js.map