"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurationController = void 0;
const common_1 = require("@nestjs/common");
const configuration_service_1 = require("./configuration.service");
const mculogger_service_1 = require("../logs/mculogger.service");
const flat = require("flat");
let ConfigurationController = class ConfigurationController {
    constructor(configurationService, logger) {
        this.configurationService = configurationService;
        this.logger = logger;
    }
    async updateConfiguration() {
        await this.configurationService.updateConfiguration();
        return await this.getConfiguration();
    }
    async getAllJsonConfiguration() {
        return await this.getConfiguration();
    }
    async getKey(key) {
        let value = await this.configurationService.get(key);
        this.logger.info({ key: key, value, });
        return { key, value };
    }
    async getConfiguration() {
        let value = await this.configurationService.getConfig();
        this.logger.info({ jsonConfig: value });
        return flat.unflatten(value);
    }
};
__decorate([
    (0, common_1.Post)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], ConfigurationController.prototype, "updateConfiguration", null);
__decorate([
    (0, common_1.Get)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], ConfigurationController.prototype, "getAllJsonConfiguration", null);
__decorate([
    (0, common_1.Get)(':key'),
    __param(0, (0, common_1.Param)('key')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], ConfigurationController.prototype, "getKey", null);
ConfigurationController = __decorate([
    (0, common_1.Controller)('configuration'),
    __metadata("design:paramtypes", [configuration_service_1.ConfigurationService,
        mculogger_service_1.MculoggerService])
], ConfigurationController);
exports.ConfigurationController = ConfigurationController;
//# sourceMappingURL=configuration.controller.js.map