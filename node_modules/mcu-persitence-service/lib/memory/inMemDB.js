"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InMemDB = void 0;
const common_1 = require("../../common/common");
//import { Log } from 'src/common/decorators';
class InMemDB extends common_1.DB {
    constructor(logger, prefix) {
        super(prefix);
        this.logger = logger;
        /**
         *
         * @param key string, => actual key = 'this.prefix/key'
         * @param value string or object (will be serialized)
         * @param ttl number in seconds or date object. Value must be at least 1 sec in the future
         */
        this.put = async (key, value, ttl) => {
            if (typeof key !== 'string') {
                this.logger.error('db put: wrong key type');
                return false;
            }
            if (typeof value !== 'string') {
                value = JSON.stringify(value);
            }
            if (ttl) {
                if (ttl instanceof Date) {
                    value['ttl'] = (ttl.getTime() - Date.now()) / 1000;
                }
                else {
                    value['ttl'] = ttl;
                }
            }
            if (this.db[this.prfx]) {
                this.db[this.prfx][key] = value;
            }
            else {
                return false;
            }
            /**
            let val: any = value;
            if (!isString(key)) {
                this.logger.error('db put: wrong key type');
                return false;
            }
    
            if (!isString(val)) {
                val = JSON.stringify(value);
            }
    
            let ttlNumber: number;
            if (ttl instanceof Date) {
                ttlNumber = ((<Date> ttl).getTime() - Date.now()) / 1000;
                this.logger.debug({action: 'inmem', lease: this.getKey(key), ttl: ttlNumber});
                await this.db.push(this.getKey(key), val, ttlNumber);
            } else {
                if (ttl > 0) {
                    await this.db.push(this.getKey(key), val, null, ttl);
                } else {
                    await this.db.push(this.getKey(key), val);
                }
            }
            **/
            return true;
        };
        this.get = async (key) => {
            if (typeof key !== 'string') {
                this.logger.error('db put: wrong key type');
                return false;
            }
            if (this.db[this.prfx] && this.db[this.prfx][key]) {
                let resp = this.db[this.prfx][key];
                if (resp instanceof String) {
                    if (resp[0] === '{') {
                        resp = JSON.parse(resp);
                    }
                }
                return resp;
            }
            return false;
        };
        this.range = async (rng) => {
            throw new Error('Not implemented');
        };
        this.rangeByPrefix = async (keyPrefix) => {
            if (this.db[this.prfx]) {
                let entries = this.db[this.prfx];
                if (entries instanceof String) {
                    if (entries[0] === '{') {
                        entries = JSON.parse(entries);
                    }
                }
                let keys = Object.keys(entries);
                let result = keys.map((key, ix) => {
                    let record;
                    try {
                        record = JSON.parse(entries[key]);
                    }
                    catch (e) {
                        record = entries[key];
                    }
                    return record;
                });
                return result;
            }
            else {
                return [];
            }
        };
        this.remove = async (key) => {
            if (this.db[this.prfx] && this.db[this.prfx][key]) {
                delete this.db[this.prfx][key];
            }
            return true;
        };
        this.db = [];
        this.prfx = prefix;
        this.db[this.prfx] = [];
    }
}
exports.InMemDB = InMemDB;
//# sourceMappingURL=inMemDB.js.map