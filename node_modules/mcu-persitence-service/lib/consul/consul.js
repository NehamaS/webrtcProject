"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsulKV = void 0;
const common_1 = require("../../common/common");
var consul = require('consul')({ host: process.env.EXT_IP, promisify: true });
const common_2 = require("../../common/common");
class ConsulKV extends common_2.DB {
    constructor(logger, prefix) {
        super(prefix);
        this.logger = logger;
        this.put = (key, value, ttl) => {
            let val = {};
            let now = Date.now();
            var ttlDate = 0;
            if (ttl instanceof Date) {
                ttlDate = ttl.getTime();
            }
            else {
                ttlDate = ttl > 0 ? new Date(now + (1000 * ttl)).getTime() : 0;
            }
            if ((typeof value) === "string") {
                val = { value: value, ATTR_TIMESTAMP: now, ATTR_TTL: ttlDate };
            }
            else {
                if (!value.hasOwnProperty(common_1.ATTR_TIMESTAMP)) {
                    val = value;
                    val[common_1.ATTR_TIMESTAMP] = now;
                    val[common_1.ATTR_TTL] = ttlDate;
                }
            }
            return this.kv.set(this.getKey(key), JSON.stringify(val));
        };
        this.get = async (key) => {
            let options = {
                key: this.getKey(key),
                raw: false
            };
            let result = await this.kv.get(options);
            try {
                result = JSON.parse(result["Value"]);
            }
            catch (error) {
                //Ignore, value is probably a simple string
                this.logger.verbose({ action: "get", error });
            }
            return result;
        };
        this.remove = async (key) => {
            let options = {
                key: this.getKey(key),
                recurse: false
            };
            await this.kv.del(options);
            return true;
        };
        this.range = async (rng) => {
            throw new Error("Not implemented");
        };
        this.rangeByPrefix = async (keyPrefix) => {
            throw new Error("Not implemented");
        };
        this.kv = consul.kv;
    }
}
exports.ConsulKV = ConsulKV;
//# sourceMappingURL=consul.js.map