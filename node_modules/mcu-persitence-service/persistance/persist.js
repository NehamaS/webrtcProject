"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Persist = void 0;
const persistFactory_1 = require("./persistFactory");
class Persist {
    constructor(logger, dbOptions, factory /*for testing, to be able to pass mock*/) {
        this.logger = logger;
        this.db = factory ? factory.getDB() : new persistFactory_1.PersistFactory(logger, dbOptions).getDB();
    }
    /**
     * Store an object (key/value) to persisncay layer (database, inmemory grid...etc)
     * @param key string key
     * @param value string / Object. Objects get servilized (strigify) before storing to persistance layer
     * @param ttl number in seconds / date to expire the record (recod will be deleted from persistance layer)
     * @returns boolean, true records saved / false record was not created
     */
    async put(key, value, ttl = 0) {
        let result = false;
        try {
            this.logger.debug({ action: "put", key: key, value: value });
            result = await this.db.put(key, value, ttl);
        }
        catch (error) {
            this.logger.error({ action: "put", error: error.message ? error.message : error });
        }
        return result;
    }
    /**
      * Extract an object (key/value) from persist layer (database, inmemory grid...etc)
      * @param key string key
      * @returns string/object
      */
    async get(key) {
        let result = {};
        try {
            this.logger.debug({ action: "get", key: key });
            result = await this.db.get(key);
        }
        catch (error) {
            this.logger.error({ action: "get", error: error.message ? error.message : error });
        }
        return result;
    }
    /**
     * Extract an object (key/value) from persist layer (database, inmemory grid...etc)
     * @param key string key
     * @returns string/object
     */
    async range(key) {
        let result = new Array();
        try {
            this.logger.debug({ action: "range", key: key });
            result = await this.db.range(key);
        }
        catch (error) {
            this.logger.error({ action: "range", error: error.message ? error.message : error });
        }
        return result;
    }
    /**
     * Extract an object (key/value) from persist layer (database, inmemory grid...etc)
     * @param key string key
     * @returns string/object
     */
    async itemsByPrefix(key) {
        let result = new Array();
        try {
            this.logger.debug({ action: "itemsByPrefix", key: key });
            result = await this.db.rangeByPrefix(key);
        }
        catch (error) {
            this.logger.error({ action: "itemsByPrefix", error: error.message ? error.message : error });
        }
        return result;
    }
    /**
   * Store an object (key/value) to persisncay layer (database, inmemory grid...etc)
   * @param key string key
   * @param value string / Object. Objects get servilized (strigify) before storing to persistance layer
   * @param ttl number in seconds / date to expire the record (recod will be deleted from persistance layer)
   * @returns boolean, true records saved / false record was not created
   */
    async remove(key) {
        let result = false;
        try {
            this.logger.debug({ action: "remove", key: key });
            result = await this.db.remove(key);
        }
        catch (error) {
            result = false;
            this.logger.error({ action: "remove", error: error.message ? error.message : error });
        }
        return result;
    }
}
exports.Persist = Persist;
//# sourceMappingURL=persist.js.map