import { PersistFactory } from './persistFactory';
import { DBOptions, RangeDB } from '../common/common';
export declare class Persist {
    private logger;
    private db;
    constructor(logger: any, dbOptions: DBOptions, factory: PersistFactory | undefined);
    /**
     * Store an object (key/value) to persisncay layer (database, inmemory grid...etc)
     * @param key string key
     * @param value string / Object. Objects get servilized (strigify) before storing to persistance layer
     * @param ttl number in seconds / date to expire the record (recod will be deleted from persistance layer)
     * @returns boolean, true records saved / false record was not created
     */
    put(key: string, value: Object | string, ttl?: number | Date): Promise<boolean>;
    /**
      * Extract an object (key/value) from persist layer (database, inmemory grid...etc)
      * @param key string key
      * @returns string/object
      */
    get(key: string): Promise<string | Object>;
    /**
     * Extract an object (key/value) from persist layer (database, inmemory grid...etc)
     * @param key string key
     * @returns string/object
     */
    range(key: RangeDB): Promise<Array<string | Object>>;
    /**
     * Extract an object (key/value) from persist layer (database, inmemory grid...etc)
     * @param key string key
     * @returns string/object
     */
    itemsByPrefix(key: string): Promise<Array<string | Object>>;
    /**
   * Store an object (key/value) to persisncay layer (database, inmemory grid...etc)
   * @param key string key
   * @param value string / Object. Objects get servilized (strigify) before storing to persistance layer
   * @param ttl number in seconds / date to expire the record (recod will be deleted from persistance layer)
   * @returns boolean, true records saved / false record was not created
   */
    remove(key: string): Promise<boolean>;
}
