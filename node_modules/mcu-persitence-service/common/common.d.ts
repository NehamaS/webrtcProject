import { DiscoveryConf } from 'mcu-discovery/Discovery';
export interface RangeDB {
    prefix: string;
    start: string;
    end: string;
}
export interface PersistDB {
    put: (key: string, value: Object | string, ttl: number | Date) => Promise<boolean>;
    get: (key: string) => Promise<string | Object>;
    remove: (key: string) => Promise<boolean>;
    range: (key: RangeDB) => Promise<Array<string | Object>>;
    rangeByPrefix: (keyPrefix: string) => Promise<Array<string | Object>>;
}
export declare const ATTR_TIMESTAMP = "timestamp";
export declare const ATTR_TTL = "ttl";
export declare enum DBType {
    CONSUL = 0,
    ETCD = 1,
    INMEM = 2
}
export interface DBOptions {
    type: DBType;
    address: string;
    port: number;
    prefix: string;
    refreshInterval?: number;
    dbConfig?: {
        host: string;
        port: number;
        ttl: number;
        lockTtl: number;
    };
    discoveryConfig?: {
        type: string;
        config: DiscoveryConf;
    };
}
export declare abstract class DB {
    private readonly prefix;
    constructor(prefix: string);
    protected getKey: (key: string) => string;
}
