/// <reference types="node" />
import ConsulStatic from "consul";
import { Consul } from "consul";
import { EventEmitter } from "events";
export declare const SERVICE_NAME: string;
export declare const SERVICE_PORT: string;
export declare const SERVICE_TAGS: string;
export declare const SERVICE_CHECK_DEREGISTER_AFTER: string;
export declare const SERVICE_CHECK_HTTP: string;
export declare const SERVICE_CHECK_TYPE: string;
export declare const SERVICE_CHECK_INTERVAL: string;
export interface DiscoveryInterface {
    consul: ConsulInterface;
    serviceData?: Function;
}
export interface QueryOpts {
    query: string;
    near: string;
    limit: number;
    timeout: number;
}
interface QueryOptions {
    list: (p: {
        timeout: number;
    }) => Query[];
    execute: (opts: QueryOpts) => any;
    create: (opts: QueryOpts) => any;
}
export interface ConsulInterface extends Consul {
    serviceId?: string;
    query?: QueryOptions;
    _opts?: any;
    host?: string;
    port?: string;
    secure?: boolean;
    promisify?: boolean;
}
export interface ConsulInterface2 extends Consul {
    (options: ConsulInterface): any;
    serviceId?: string;
    query?: QueryOptions;
    _opts?: any;
    host?: string;
    port?: string;
    secure?: boolean;
    promisify?: boolean;
}
export interface QueryDetails {
    Service: {
        Address: string;
        ID: string;
    };
}
export interface QueryResult {
    Nodes: QueryDetails[];
}
export interface Query {
    ID: string;
    Node: string;
    Address: string;
    serviceAdress: string;
    Datacenter: string;
    TaggedAddresses: string;
    NodeMeta: [];
    ServiceKind: string;
    ServiceID: string;
    node?: string;
}
export interface AgentServicesOptions extends ConsulStatic.Agent.ServicesOptions {
    id?: string;
}
export interface Nodes extends ConsulStatic.Catalog.Node.ListOptions {
    [key: string]: number | string | boolean | EventEmitter | string;
}
export interface RegisterCheck {
    status?: string;
    id: string;
    name: string;
    deregistercriticalserviceafter?: string;
    notes?: string;
    http?: string;
    interval?: string;
    ttl?: string;
    serviceid?: string;
}
export interface RegisterOptions {
    timeout?: number;
    name?: string;
    id?: string;
    tags?: string[];
    meta?: string[];
    address?: string;
    port?: number;
    check?: RegisterCheck;
    checks?: RegisterCheck[];
    deregistercriticalserviceafter?: string;
    weights?: {
        passing: number;
        warning: number;
    };
    retry?: boolean;
    override?: boolean;
}
export interface ServiceOptions {
    checkType?: string;
    serviceAddress?: string;
    checkPort?: string;
    debug?: boolean;
    servicePort?: string;
    serviceName?: string;
    serviceUrl?: string;
    serviceTags?: string;
    consulUrl?: string;
    checkTimeout?: string;
    checkDeregister?: string;
    checkHttp?: string;
    checkInterval?: string;
    ttl?: string;
    register?: boolean;
    secure?: boolean;
    promisify?: boolean;
}
export declare enum ServiceType {
    sipgw = 11,
    msml = 12,
    janusgw = 13,
    janus = 14,
    stats = 15,
    mediagw = 16,
    media = 17,
    recordermng = 18,
    recorderdrv = 19,
    mediagwdev = 20
}
export {};
