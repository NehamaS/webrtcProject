"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const __ = require('lodash');
const argv = require('minimist')(process.argv.slice(2));
const ThriftClientsPool_js_1 = require("./ThriftClientsPool.js");
const Discovery_js_1 = require("./Discovery.js");
class ClientDiscovery {
    constructor(serverApi, config, logger) {
        this.serverApi = serverApi;
        this.config = config;
        this.logger = logger;
        this.discoveryEnable = true;
        this.ttl = 0;
        if (__.has(config, 'discoveryEnable')) {
            this.discoveryEnable = config.discoveryEnable;
        }
        this.discovery = new Discovery_js_1.Discovery(config.discoveryType, logger);
        this.serverIp = null;
        this.thriftClientsPool = new ThriftClientsPool_js_1.ThriftClientsPool(serverApi, config.connConfig, logger);
        if (this.discoveryEnable === false) {
            // ttl must be 0
            let ip = config.discoveryConfig.ip;
            if (!ip) {
                this.logger.error("discovery = false, but no service ip provided");
            }
            else {
                this.serverIp = {
                    "address": ip,
                    "thriftPort": this.getServicePorts().thriftPort
                };
                this.logger.debug("discovery = false, provided address is: " + JSON.stringify(this.serverIp));
            }
        }
        else {
            // get ttl from config if exists
            if (config.discoveryConfig.ttl && config.discoveryConfig.ttl > 0) {
                this.ttl = config.discoveryConfig.ttl;
                this._setTimeout();
            }
        }
    }
    getServiceAddress(id, thriftPort, discoveryConfig) {
        return new Promise((resolve, reject) => {
            this.logger.debug("function getServiceAddress for id = " + id);
            if (this.discoveryEnable === false) {
                this.logger.debug("discoveryEnable false, serverIp = " + JSON.stringify(this.serverIp));
                return resolve(this.serverIp);
            }
            let conf;
            if (discoveryConfig && discoveryConfig != null) {
                conf = discoveryConfig;
            }
            else {
                conf = this.config.discoveryConfig;
                conf.type = this.config.serviceType;
            }
            this.logger.info("getServiceAddress.  conf: " + JSON.stringify(conf));
            this.discovery.getService(conf, id, (err, serviceAddress) => {
                if (err) {
                    return reject(err);
                }
                this.logger.info("getServiceAddress for meetingId = %s, serviceAddress = %s", id, JSON.stringify(serviceAddress));
                let dnsResolve = true;
                if (__.has(discoveryConfig, 'dnsResolve')) {
                    dnsResolve = discoveryConfig.dnsResolve;
                }
                if (this.config.discoveryType === "dns" && dnsResolve == true) {
                    let port = (thriftPort === true) ? serviceAddress.thriftPort : serviceAddress.httpPort;
                    this.discovery.dnsResolve(serviceAddress.address, port, (error, ip) => {
                        if (error) {
                            return reject(err);
                        }
                        serviceAddress.address = ip;
                        return resolve(serviceAddress);
                    });
                }
                else {
                    return resolve(serviceAddress);
                }
            });
        });
    }
    getClientFromPool(serverAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.debug('ClientDescovery.getClientFromPool function serverAddress = %s', JSON.stringify(serverAddress));
            if (!serverAddress) {
                this.logger.error("No serverAddress provided");
                return null;
            }
            let thriftClient = yield this.thriftClientsPool.getClient(serverAddress);
            if (thriftClient) {
                this.logger.debug('ClientDescovery.getClientFromPool: the clinet exists.');
                return thriftClient;
            }
            this.logger.error("Failed to get serverAddress");
            return null;
        });
    }
    getClient(id) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.debug("function getClient");
            try {
                const address = yield this.makeDiscovery(id);
                this.logger.debug("getClient: thriftClientDiscovery.makeDiscovery - got address = %j", address);
                const client = yield this.getClientFromPool(address);
                if (client == null) {
                    throw "failed to get Client";
                }
                this.logger.debug("getClient: thriftClientDiscovery.getThriftClient");
                return client;
            }
            catch (error) {
                this.logger.error("getClient");
                this.logger.error(error);
                throw error;
            }
        });
    }
    makeDiscovery(id) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.debug("function makeDiscovery");
            if (this.serverIp == null) {
                try {
                    this.serverIp = yield this.getServiceAddress(id, true, null);
                    return this.serverIp;
                }
                catch (error) {
                    this.logger.error(error);
                    throw error;
                }
            }
            else {
                return this.serverIp;
            }
        });
    }
    getServicePorts() {
        this.logger.debug("function getServicePorts");
        return this.discovery.getServicePorts(this.config.serviceType);
    }
    getServicePortsByName(serviceType) {
        this.logger.debug("function getServicePorts");
        return this.discovery.getServicePorts(serviceType);
    }
    _setTimeout() {
        //this.logger.verbose("_setTimeout function for discovery address");        
        setTimeout(() => {
            this.serverIp = null;
            //this.logger.verbose("_setTimeout function timer expired");
            this._setTimeout();
        }, this.ttl);
    }
}
exports.ClientDiscovery = ClientDiscovery;
