"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = __importDefault(require("util"));
const request_promise_native_1 = __importDefault(require("request-promise-native"));
const decorator_1 = require("./lib/decorator");
const DEFAULT_SERVICE_WEIGHT = { passing: 10, warning: 1 };
class Register {
    constructor(mcu) {
        this.registerServiceByHttp = (options) => __awaiter(this, void 0, void 0, function* () {
            const { hostname, port, protocol, path } = this.mcu.consulLeader._opts.baseUrl;
            const url = util_1.default.format("%s//%s:%s%s/agent/service/register", protocol, hostname, port, path);
            const Service = {
                ID: options.id,
                Name: options.name,
                Tags: options.tags,
                Address: options.address,
                Port: options.port,
                Meta: options.meta,
                EnableTagOverride: false,
                Checks: options.checks,
                Weights: DEFAULT_SERVICE_WEIGHT,
                timeout: 2000
            };
            const response = yield request_promise_native_1.default.put(url, Service);
            this.logger.debug(response.toString().replace(/"/g, ""));
        });
        this.mcu = mcu;
        this.logger = mcu.logger;
    }
    /**
     * @description Registers a new consul check
     * @param {RegisterCheck} check
     * @returns {Promise<void>}
     * @memberof Register
     */
    createCheck(check) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!check.name || !check.serviceid) { //!check.id ||
                this.logger.info("create check missing parameters. required are id, name, and serviceid");
                this.logger.debug({ action: "check definition", check: check });
                return;
            }
            try {
                yield this.mcu.consul.agent.check.register(check);
            }
            catch (e) {
                this.logger.error({ error: "createCheck failed", message: e.message, statusCode: e.statusCode });
            }
        });
    }
    /**
     * @description Marks the check as passed and updates the TTL
     * @param {string} [status="warn"]
     * @param {string} id
     * @param {string} [note=""]
     * @returns {Promise<void>}
     * @memberof Register
     */
    updateCheck(id, status = "warn", note = "") {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id) {
                this.logger.info("missing check id");
                return;
            }
            try {
                const response = yield this.mcu.consulLeader.agent.check.pass(id);
                this.logger.debug({ action: "check pass response", resposne: response });
            }
            catch (e) {
                this.logger.error({ error: "update check failed", message: e.message, statusCode: e.statusCode });
            }
        });
    }
    /**
     * @description Registers a new service.
     * @param {RegisterOptions} options
     * @returns {Promise<void>}
     * @memberof Register
     */
    createService(options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!options.name || !options.address) { //!options.id ||
                this.logger.info({ action: "create service missing parameters. required are id, name, and address", options: options });
                return;
            }
            try {
                //this.logger.info(`createService  ${JSON.stringify(this.mcu.consulLeader._opts)} `);
                options.timeout = 1500;
                if (!options.retry)
                    this.logger.debug({ action: "creating service", name: options.name });
                if (options.override) {
                    yield this.registerServiceByHttp(options);
                }
                else {
                    //Default behavior
                    const resp = yield this.mcu.consulLeader.agent.service.register(options);
                    this.logger.debug({ action: "register response:", response: resp });
                }
            }
            catch (e) {
                this.mcu.consulActive = false;
                if (e.message) {
                    this.logger.error({ error: "createService failed", message: e.message });
                }
                else {
                    this.logger.debug({ error: "createService failed", err: e });
                }
            }
        });
    }
    /**
     * @description Deregisters a new service.
     * @param {string} serviceId
     * @returns {Promise<void>}
     * @memberof Register
     */
    deregisterService(serviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!serviceId) {
                this.logger.info("missing service id");
                return;
            }
            try {
                this.logger.info(`deregisterService: ${serviceId}`);
                yield this.mcu.consul.agent.service.deregister(serviceId);
            }
            catch (e) {
                this.logger.error({ error: "deregisterService failed", message: e.message, statusCode: e.statusCode });
            }
        });
    }
    /**
     * @description Deregisters a service check.
     * @returns {Promise<void>}
     * @memberof Register
     * @param checkId
     */
    deregisterCheck(checkId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!checkId) {
                this.logger.info("missing check id");
                return;
            }
            try {
                yield this.mcu.consul.agent.check.deregister(checkId);
            }
            catch (e) {
                this.logger.error({ error: "deregisterCheck failed", message: e.message, statusCode: e.statusCode });
            }
        });
    }
}
__decorate([
    decorator_1.notSupportedK8s()
], Register.prototype, "createCheck", null);
__decorate([
    decorator_1.notSupportedK8s()
], Register.prototype, "updateCheck", null);
__decorate([
    decorator_1.notSupportedK8s()
], Register.prototype, "createService", null);
__decorate([
    decorator_1.notSupportedK8s()
], Register.prototype, "deregisterService", null);
__decorate([
    decorator_1.notSupportedK8s()
], Register.prototype, "deregisterCheck", null);
exports.Register = Register;
