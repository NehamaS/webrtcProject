"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const figlet_1 = __importDefault(require("figlet"));
const common_1 = require("../lib/common");
const McuDiscovery_1 = __importDefault(require("../McuDiscovery"));
const args = process.argv.slice(2);
const parameters = {
    name: "serviceName",
    port: "servicePort",
    http: "checkHttp",
    tags: "serviceTags",
    checkport: "checkPort",
    address: "serviceAddress",
    type: "checkType",
    debug: "debug"
};
const options = {};
const showHelp = () => {
    figlet_1.default("MCU Discovery", function (err, data) {
        if (err) {
            console.log(err);
        }
        console.info(`
        ${data}
        
        Usage: mcu-register <options>
        Options:
        name           Service Name
        port           Service Port
        tags           Service Tags
        checkport      Port to use for health check
        address        custom service address
        type           health check type (ttl or http) default http
        debug          Enable debug - debug="true"
        
        Example: mcu-register name="Service Name" port="5383"
        `);
        process.exit();
    });
};
if (args) {
    args
        .filter(item => item.indexOf("=") !== -1)
        .map(arg => {
        const key = arg.split("=")[0];
        const val = arg.split("=")[1];
        if (parameters[key]) {
            options[parameters[key]] = val;
        }
    });
}
const mcuDiscover = (options = {}) => {
    return new McuDiscovery_1.default(options);
};
(() => __awaiter(void 0, void 0, void 0, function* () {
    if ((args && args[0] === "--help") || args.length === 0) {
        showHelp();
    }
    else {
        const serviceName = process.env[common_1.SERVICE_NAME] || options.serviceName;
        const servicePort = process.env[common_1.SERVICE_PORT] || options.servicePort;
        if (!serviceName || !servicePort) {
            return showHelp();
        }
        process.env.PLATFORM_TYPE = 'consul';
        mcuDiscover(options);
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        //require("../index.js")(options);
    }
}))();
