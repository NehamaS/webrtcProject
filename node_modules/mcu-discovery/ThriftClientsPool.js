"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ThriftClient_js_1 = require("./ThriftClient.js");
class ThriftClientsPool {
    constructor(serverApi, connConfig, logger) {
        this.serverApi = serverApi;
        this.connConfig = connConfig;
        this.logger = logger;
        this.clientsMap = new Map();
    }
    addClient(serverIp, serverPort) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.debug('ThriftClientsPool.addClient function serverIp = %s, serverPort = %d', serverIp, serverPort);
            let thriftClient = new ThriftClient_js_1.ThriftClient(serverIp, serverPort, this.serverApi, this.connConfig, this.logger);
            yield thriftClient.connect();
            let key = serverIp + ":" + JSON.stringify(serverPort);
            this.logger.debug("ThriftClientsPool.addClient: set client to map.");
            this.clientsMap.set(key, thriftClient);
            return thriftClient;
        });
    }
    getClient(serverAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.debug({ action: 'ThriftClientsPool.getClient function serverAddress', address: serverAddress });
            let key = serverAddress.address + ":" + JSON.stringify(serverAddress.thriftPort);
            let thriftClient = this.clientsMap.get(key);
            if (thriftClient && thriftClient.isConnected()) {
                this.logger.debug("ThriftClientsPool.getClient: the client exists.");
                return thriftClient;
            }
            else {
                this.clientsMap.delete(key);
                try {
                    this.logger.info({ action: "ThriftClientsPool.getClient", serverAddress: serverAddress });
                    var client = yield this.addClient(serverAddress.address, serverAddress.thriftPort);
                    this.logger.debug('ThriftClientsPool.getClient: the client was created.');
                    return client;
                }
                catch (err) {
                    this.logger.error("Failed to get thrift client");
                    return null;
                }
            }
        });
    }
}
exports.ThriftClientsPool = ThriftClientsPool;
