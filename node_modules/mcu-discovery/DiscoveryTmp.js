"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util = __importStar(require("util"));
const request = require("request-promise-native");
const node_cache_1 = __importDefault(require("node-cache"));
exports.NO_CACHE = 0;
class Discovery {
    constructor(mcu) {
        this.mcu = mcu;
        this.logger = mcu.logger;
        this.conf = {
            cacheEnabled: false,
            ttl: 200,
            cacheEvictCheck: 10,
            limit: 3,
            timeOut: 750 /*ms, discovery query timeout*/
        };
        this.cache = new node_cache_1.default({ stdTTL: 10, checkperiod: 120 });
    }
    getServiceByID(serviceName) {
        return __awaiter(this, void 0, void 0, function* () {
            const { protocol, hostname, port, path } = this.mcu.consul._opts.baseUrl;
            const url = util.format("%s//%s:%s%s/agent/service/%s", protocol, hostname, port, path, serviceName);
            const response = yield request(url, { json: true });
            return response;
        });
    }
    deregisterServiceByID(serviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { protocol, hostname, port, path } = this.mcu.consul._opts.baseUrl;
            const url = util.format("%s//%s:%s%s/agent/service/deregister/%s", protocol, hostname, port, path, serviceId);
            const response = yield request.put(url, { json: true });
            return response;
        });
    }
    getService(serviceName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let executeDiscovery = true;
                const opts = {
                    query: serviceName,
                    near: "_agent",
                    limit: this.conf.limit || 3,
                    timeout: this.conf.timeOut || 750
                };
                if (this.conf.cacheEnabled) {
                    const cachedResults = this.cache.get(serviceName);
                    if (cachedResults) {
                        executeDiscovery = false;
                        return cachedResults;
                    }
                }
                if (executeDiscovery) {
                    const result = yield this.mcu.consul.query.execute(opts);
                    const serviceSelected = result.serviceSelected = result.Nodes[0];
                    result.selected = {
                        id: serviceSelected.Service.ID,
                        container: {
                            address: serviceSelected.Service.Address,
                            httpPort: serviceSelected.Service.Port,
                        }
                    };
                    if (this.conf.cacheEnabled && this.conf.ttl !== exports.NO_CACHE) {
                        this.cache.set(serviceName, result, this.conf.ttl);
                    }
                    return result;
                }
            }
            catch (e) {
                this.logger.info(`getService failed for ${serviceName}: ${e.message}, statusCode: ${e.statusCode}`);
            }
            return [];
        });
    }
    services(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!options.retry)
                    this.logger.info("getting services");
                const services = yield this.mcu.consul.catalog.service.list({ timeout: 700 });
                return Object.keys(services);
            }
            catch (e) {
                if (options.retry) {
                    throw e;
                }
                this.logger.info(`get services failed: ${e.message}`);
                return yield this.mcu.retry(this.constructor.name, "services", options);
            }
        });
    }
    getQueries(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const queries = yield this.mcu.consul.query.list({ timeout: 1000 });
                return queries;
            }
            catch (e) {
                if (options.retry) {
                    throw e;
                }
                this.logger.info(`get queries failed: ${e.message}`);
                return yield this.mcu.retry(this.constructor.name, "getQueries", options);
            }
        });
    }
}
exports.Discovery = Discovery;
