"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const thrift = require('thrift');
const transport = thrift.TFramedTransport;
const protocol = thrift.TBinaryProtocol;
class ThriftClient {
    constructor(clientAddress, clientPort, serverApi, connConfig, logger) {
        this.clientAddress = clientAddress;
        this.clientPort = clientPort;
        this.serverApi = serverApi;
        this.connConfig = connConfig;
        this.logger = logger;
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.connection = thrift.createConnection(this.clientAddress, this.clientPort, {
                    transport: transport,
                    protocol: protocol,
                    max_attempts: this.connConfig.maxAttempts ? this.connConfig.maxAttempts : 3,
                    retry_max_delay: this.connConfig.retryMaxDelay ? this.connConfig.retryMaxDelay : 1000,
                    connect_timeout: this.connConfig.connectTimeout ? this.connConfig.connectTimeout : 1000,
                    debug: this.connConfig.debug ? this.connConfig.debug : false
                });
                this.client = thrift.createClient(this.serverApi, this.connection);
                this.connection.on('error', (err) => {
                    if (err) {
                        this.logger.error({ action: 'ThriftClient: connection error:', error: err });
                        reject(`Connection error`);
                    }
                });
                this.connection.on('timeout', () => {
                    if (!this.error) {
                        this.error = `ThriftClient: connection timeout: ip ${this.clientAddress} port: ${this.clientPort}`;
                        this.logger.error(this.error);
                        reject(this.error);
                    }
                });
                this.connection.on('close', () => {
                    if (!this.error) {
                        this.error = `ThriftClient: connection closed: ip ${this.clientAddress} port: ${this.clientPort}`;
                        this.logger.error(this.error);
                        reject(this.error);
                    }
                });
                this.connection.on('connect', () => {
                    this.logger.info({ action: "ThriftClient: connection connected", ip: this.clientAddress, port: this.clientPort });
                    resolve(this.client);
                });
            });
        });
    }
    isConnected() {
        this.logger.debug("ThriftClient.isConnected function");
        let status = this.connection ? this.connection.connected : false;
        this.logger.debug({ action: "ThriftClient.isConnected", "connection status": status });
        return status;
    }
    getClient() {
        this.logger.debug("ThriftClient.getClient function");
        return this.client;
    }
    getIp() {
        this.logger.debug("ThriftClient.getIp function");
        return this.clientAddress;
    }
    getPort() {
        this.logger.debug("ThriftClient.getPort function");
        return this.clientPort;
    }
}
exports.ThriftClient = ThriftClient;
