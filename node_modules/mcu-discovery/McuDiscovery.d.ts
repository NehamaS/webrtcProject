import { ConsulInterface, QueryResult, ServiceOptions } from "./lib/common";
import { Discovery } from "./Discovery";
import { Register } from "./Register";
export declare const consulProtocol = "http";
export declare const consulPort = "8500";
export declare const consulUrl = "127.0.0.1";
export declare const checkDeregister = "2s";
export declare const checkType = "http";
export declare const checkHttp = "/healthcheck";
export declare const checkInterval = "10s";
export declare const retryInterval = "3sec";
export default class McuDiscovery {
    [index: string]: any;
    Discovery: Discovery;
    Register: Register;
    serviceName: string;
    serviceAddress: string;
    serviceHost: string;
    serviceTags: string[];
    serviceUrl: string;
    secure: boolean;
    promisify: boolean;
    debug: boolean;
    register: boolean;
    consul: ConsulInterface;
    consulLeader: ConsulInterface;
    checkDeregister: string;
    checkType: string;
    checkHttp: string;
    checkInterval: string;
    servicePort?: string;
    consulActive?: boolean;
    constructor(options?: ServiceOptions);
    monitor(): Promise<void>;
    findLeader(): Promise<void>;
    getServiceId(): string;
    registerService(): Promise<void>;
    connect(hostname: string, port: string, type?: string): Promise<void>;
    checkConsul(): Promise<string | boolean>;
    lookup(address: string): Promise<boolean>;
    retry(methodName: string, methodFunction: string, options: any): Promise<void>;
    queryConsul(): Promise<QueryResult>;
    serviceExists(): Promise<boolean>;
}
