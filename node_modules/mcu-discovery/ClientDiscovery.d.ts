import { ThriftClient } from './ThriftClient.js';
import { ConnConfig } from './ThriftClient.js';
import { ThriftClientsPool } from './ThriftClientsPool.js';
import { DiscoveryConf, ServiceType, Discovery, DiscoveryEntiry } from './Discovery.js';
export interface ServerIp {
    "address": string;
    "thriftPort"?: number;
    "httpPort"?: number;
}
export interface Config {
    discoveryEnable: boolean;
    discoveryType: string;
    discoveryConfig: DiscoveryConf;
    serviceType: ServiceType;
    connConfig: ConnConfig;
}
export declare class ClientDiscovery {
    private serverApi;
    private config;
    private logger;
    discoveryEnable: boolean;
    thriftClientsPool: ThriftClientsPool;
    thriftClient: ThriftClient;
    discovery: Discovery;
    serverIp: ServerIp;
    ttl: number;
    constructor(serverApi: any, config: Config, logger: any);
    getServiceAddress(id: string, thriftPort: boolean, discoveryConfig?: DiscoveryConf): Promise<ServerIp>;
    getClientFromPool(serverAddress: any): Promise<ThriftClient>;
    getClient(id: any): Promise<ThriftClient>;
    private makeDiscovery;
    getServicePorts(): DiscoveryEntiry;
    getServicePortsByName(serviceType: ServiceType): DiscoveryEntiry;
    private _setTimeout;
}
