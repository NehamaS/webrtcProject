import { OnApplicationBootstrap } from '@nestjs/common';
import { MculoggerService } from "service-infrastructure/common/logs/mculogger.service";
import { ApiGwDto } from "./dto/api.gw.dto";
import { DbService } from "./common/db/db.service";
import { WsDispatcher } from "./ws.dispatcher";
import { ApiGwFormatDto } from "./dto/apiGwFormatDto";
import { CallServiceApiImpl } from "./callserviceapi/call.service.api";
import { ConfigurationService } from "service-infrastructure/common/config/configuration.service";
import { PushNotificationService } from "./push/push.notification.service";
import { WsRequestDto } from "./dto/ws.request.dto";
import { ValidatorsFactory } from "./common/validators/validators.factory";
import { ErrorBuilder } from "./common/error.builder";
import { CdrService } from "./cdr/cdr.service";
import { CounterService } from "./metrics/counter.service";
export declare class ClientMsgHandler implements OnApplicationBootstrap {
    private readonly logger;
    private readonly dbService;
    private readonly wsDispatcher;
    private readonly callService;
    private readonly validatorsFactory;
    private readonly errorBuilder;
    private readonly config;
    private readonly notification;
    private readonly cdrService;
    private readonly counterService;
    private persist;
    private useLocalWs;
    constructor(logger: MculoggerService, dbService: DbService, wsDispatcher: WsDispatcher, callService: CallServiceApiImpl, validatorsFactory: ValidatorsFactory, errorBuilder: ErrorBuilder, config: ConfigurationService, notification: PushNotificationService, cdrService: CdrService, counterService: CounterService);
    onApplicationBootstrap(): void;
    wsDisconnect(connId: string): Promise<boolean>;
    handleMsg(event: WsRequestDto): Promise<void>;
    private getUserData;
    ring(rsp: ApiGwFormatDto): Promise<void>;
    connect(rsp: ApiGwFormatDto): Promise<void>;
    reject(rsp: ApiGwFormatDto): Promise<void>;
    endCallAck(rsp: ApiGwFormatDto): void;
    updateAck(rsp: ApiGwFormatDto): Promise<void>;
    call(req: ApiGwFormatDto): Promise<void>;
    update(req: ApiGwFormatDto): Promise<void>;
    disconnect(req: ApiGwFormatDto): Promise<void>;
    onDisconnect(connId: string): Promise<boolean>;
    onRegister(event: WsRequestDto): Promise<void>;
    onUnregister(event: WsRequestDto): Promise<void>;
    convert2ApiGwFormat(event: ApiGwDto): ApiGwFormatDto;
    onCallStart(event: ApiGwDto): Promise<void>;
    onModify(event: ApiGwDto): Promise<void>;
    onTerminate(event: ApiGwDto): Promise<void>;
    onTerminateAck(event: ApiGwDto): Promise<void>;
    onCallStatus(event: ApiGwDto): Promise<void>;
    onAnswer(event: ApiGwDto): Promise<void>;
    onModifyAck(event: ApiGwDto): Promise<void>;
    convert2ApiGwDto(msg: ApiGwFormatDto, action: string): ApiGwDto;
    buildErrRsp(req: ApiGwFormatDto, code: string, desc: string): ApiGwFormatDto;
    userNotFound(action: string, dest: string, req: ApiGwFormatDto): Promise<void>;
    callUser(req: ApiGwFormatDto, action: string): Promise<void>;
    getConnIdForStartCall(req: ApiGwFormatDto): Promise<string>;
    sendPushNotification(req: ApiGwFormatDto): Promise<string>;
    startCall(req: ApiGwFormatDto): Promise<void>;
    modifyCall(req: ApiGwFormatDto): Promise<void>;
    endCall(req: ApiGwFormatDto): Promise<void>;
    buildErrReq(rsp: ApiGwFormatDto): Promise<ApiGwFormatDto>;
    cancelCall(action: string, dest: string, rsp: ApiGwFormatDto): Promise<void>;
    response2User(rsp: ApiGwFormatDto, reqAction: string, rspAction: string): Promise<void>;
    ringCall(rsp: ApiGwFormatDto): Promise<void>;
    answerCall(rsp: ApiGwFormatDto): Promise<void>;
    modifyResponse(rsp: ApiGwFormatDto): Promise<void>;
    rejectCall(rsp: ApiGwFormatDto): Promise<void>;
    private preformAction;
    clearDb(callId: string): Promise<void>;
    private updateSessionData;
    private sendRejectResponse;
    private getResponseAction;
    private getActionFunction;
    conferenceAction(event: WsRequestDto): Promise<void>;
    onUnsupportedAction(event: ApiGwDto): Promise<void>;
    onCreateConference(event: ApiGwDto): Promise<void>;
    addParticipants(participants: string[]): void;
    onJoinConference(event: ApiGwDto): Promise<void>;
    onModifyConnection(event: ApiGwDto): Promise<void>;
    onCloseConnection(event: ApiGwDto): Promise<void>;
    onDestroyConference(event: ApiGwDto): Promise<void>;
    onCreatePublisher(event: ApiGwDto): Promise<void>;
    onStopPublisher(event: ApiGwDto): Promise<void>;
    createConferenceAck(rsp: ApiGwFormatDto): Promise<void>;
    joinConferenceAck(rsp: ApiGwFormatDto): Promise<void>;
    modifyConnectionAck(rsp: ApiGwFormatDto): Promise<void>;
    closeConnectionAck(rsp: ApiGwFormatDto): Promise<void>;
    destroyConferenceAck(rsp: ApiGwFormatDto): Promise<void>;
    createPublisherAck(rsp: ApiGwFormatDto): Promise<void>;
    stopPublisherAck(rsp: ApiGwFormatDto): Promise<void>;
}
